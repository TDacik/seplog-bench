//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node)
	requires ((((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x3)) &*& (null != x4)) &*& (null != x5)) &*& (null != x6)) &*& (x1 != x6)) &*& (x2 != x6)) &*& (x3 != x4)) &*& (x3 != x5)) &*& (((x1.next |-> x6) &*& (lseg (x2, x1))) &*& (x6.next |-> x2)))
	ensures ((x6 != x7) &*& ((lseg (x7, x6)) &*& (x6.next |-> x7)))
{}
