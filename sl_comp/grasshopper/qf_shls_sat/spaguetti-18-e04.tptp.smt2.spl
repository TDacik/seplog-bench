//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node)
	requires ((((((((((((((((((((((((((((null == null) &*& (x7 != x8)) &*& (x7 != x11)) &*& (x7 != x15)) &*& (x9 != x18)) &*& (x9 != x14)) &*& (x2 != x11)) &*& (x2 != x3)) &*& (x12 != x13)) &*& (x12 != x14)) &*& (x14 != x15)) &*& (x8 != x14)) &*& (x4 != x13)) &*& (x4 != x10)) &*& (x4 != x17)) &*& (x1 != x6)) &*& (x1 != x11)) &*& (x1 != x18)) &*& (x1 != x7)) &*& (x1 != x16)) &*& (x1 != x17)) &*& (x10 != x14)) &*& (x16 != x18)) &*& (x16 != x17)) &*& (x5 != x9)) &*& (x5 != x13)) &*& (x5 != x14)) &*& ((((((((((((((lseg (x5, x4)) &*& (lseg (x13, x10))) &*& (lseg (x1, x17))) &*& (lseg (x15, x10))) &*& (lseg (x15, x4))) &*& (lseg (x15, x8))) &*& (lseg (x14, x17))) &*& (lseg (x17, x2))) &*& (lseg (x9, x12))) &*& (lseg (x9, x18))) &*& (lseg (x7, x2))) &*& (lseg (x7, x13))) &*& (lseg (x3, x1))) &*& (lseg (x11, x17))))
	ensures false
{}
