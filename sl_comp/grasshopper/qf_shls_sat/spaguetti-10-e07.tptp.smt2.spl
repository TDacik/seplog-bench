//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node)
	requires (((((((null == null) &*& (x8 != x9)) &*& (x4 != x7)) &*& (x1 != x8)) &*& (x2 != x6)) &*& (x2 != x5)) &*& (((((((((lseg (x2, x5)) &*& (lseg (x2, x7))) &*& (lseg (x9, x8))) &*& (lseg (x9, x6))) &*& (lseg (x7, x1))) &*& (lseg (x3, x4))) &*& (lseg (x8, x2))) &*& (lseg (x8, x3))) &*& (lseg (x8, x4))))
	ensures false
{}
