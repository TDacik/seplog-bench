//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node)
	requires (((((((null == null) &*& (x8 != x9)) &*& (x4 != x5)) &*& (x1 != x11)) &*& (x9 != x10)) &*& (x2 != x6)) &*& ((((((((lseg (x5, x6)) &*& (lseg (x10, x7))) &*& (lseg (x1, x10))) &*& (lseg (x1, x4))) &*& (lseg (x2, x10))) &*& (lseg (x2, x11))) &*& (lseg (x7, x10))) &*& (lseg (x6, x11))))
	ensures false
{}
