//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires (((((((null == null) &*& (x4 != x7)) &*& (x4 != x10)) &*& (x3 != x8)) &*& (x2 != x9)) &*& (x5 != x9)) &*& (((((((((((lseg (x5, x1)) &*& (lseg (x7, x12))) &*& (lseg (x7, x8))) &*& (lseg (x3, x5))) &*& (lseg (x3, x12))) &*& (lseg (x4, x12))) &*& (lseg (x4, x7))) &*& (lseg (x1, x6))) &*& (lseg (x6, x9))) &*& (lseg (x6, x7))) &*& (lseg (x8, x11))))
	ensures false
{}
