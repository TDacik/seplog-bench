//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node)
	requires (((((((((((((((((((((null == null) &*& (x11 != x13)) &*& (x11 != x15)) &*& (x3 != x6)) &*& (x7 != x9)) &*& (x9 != x18)) &*& (x9 != x19)) &*& (x12 != x18)) &*& (x12 != x19)) &*& (x2 != x16)) &*& (x2 != x13)) &*& (x8 != x18)) &*& (x8 != x10)) &*& (x1 != x6)) &*& (x1 != x7)) &*& (x1 != x10)) &*& (x1 != x16)) &*& (x1 != x17)) &*& (x5 != x16)) &*& (x5 != x13)) &*& ((((((lseg (x8, x1)) &*& (lseg (x12, x19))) &*& (lseg (x17, x19))) &*& (lseg (x7, x17))) &*& (lseg (x7, x12))) &*& (lseg (x3, x2))))
	ensures false
{}
