//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires (((((((null == null) &*& (x3 != x11)) &*& (x3 != x12)) &*& (x7 != x12)) &*& (x2 != x11)) &*& (x2 != x10)) &*& (((((((((((((((((lseg (x5, x2)) &*& (lseg (x5, x7))) &*& (lseg (x5, x4))) &*& (lseg (x12, x1))) &*& (lseg (x12, x6))) &*& (lseg (x2, x12))) &*& (lseg (x9, x10))) &*& (lseg (x3, x11))) &*& (lseg (x3, x1))) &*& (lseg (x3, x6))) &*& (lseg (x4, x9))) &*& (lseg (x4, x8))) &*& (lseg (x11, x8))) &*& (lseg (x11, x6))) &*& (lseg (x1, x9))) &*& (lseg (x1, x8))) &*& (lseg (x6, x2))))
	ensures false
{}
