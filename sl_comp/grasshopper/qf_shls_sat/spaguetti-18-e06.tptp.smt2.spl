//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node)
	requires (((((((((((((((((((((((((((((((((((null == null) &*& (x6 != x16)) &*& (x6 != x17)) &*& (x6 != x12)) &*& (x3 != x18)) &*& (x3 != x7)) &*& (x3 != x10)) &*& (x3 != x13)) &*& (x3 != x9)) &*& (x3 != x15)) &*& (x7 != x11)) &*& (x7 != x16)) &*& (x7 != x12)) &*& (x9 != x10)) &*& (x9 != x14)) &*& (x12 != x18)) &*& (x12 != x13)) &*& (x12 != x15)) &*& (x2 != x11)) &*& (x2 != x4)) &*& (x2 != x7)) &*& (x2 != x14)) &*& (x15 != x16)) &*& (x8 != x13)) &*& (x4 != x9)) &*& (x1 != x11)) &*& (x1 != x4)) &*& (x1 != x7)) &*& (x1 != x10)) &*& (x1 != x2)) &*& (x13 != x16)) &*& (x13 != x17)) &*& (x10 != x11)) &*& (x5 != x14)) &*& ((((((((lseg (x5, x15)) &*& (lseg (x5, x9))) &*& (lseg (x5, x4))) &*& (lseg (x16, x13))) &*& (lseg (x4, x12))) &*& (lseg (x4, x6))) &*& (lseg (x15, x1))) &*& (lseg (x7, x13))))
	ensures false
{}
