//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires ((((((((null == null) &*& (x8 != x9)) &*& (x4 != x10)) &*& (x3 != x6)) &*& (x3 != x11)) &*& (x10 != x11)) &*& (x10 != x12)) &*& ((((((((((((lseg (x5, x9)) &*& (lseg (x5, x6))) &*& (lseg (x10, x3))) &*& (lseg (x4, x11))) &*& (lseg (x12, x10))) &*& (lseg (x2, x4))) &*& (lseg (x7, x9))) &*& (lseg (x3, x12))) &*& (lseg (x3, x7))) &*& (lseg (x3, x4))) &*& (lseg (x11, x9))) &*& (lseg (x6, x9))))
	ensures false
{}
