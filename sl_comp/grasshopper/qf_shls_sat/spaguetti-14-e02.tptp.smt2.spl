//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node)
	requires (((((((((null == null) &*& (x6 != x14)) &*& (x8 != x10)) &*& (x4 != x8)) &*& (x4 != x7)) &*& (x3 != x5)) &*& (x9 != x14)) &*& (x13 != x14)) &*& ((((((((((((lseg (x5, x10)) &*& (lseg (x13, x12))) &*& (lseg (x1, x7))) &*& (lseg (x8, x14))) &*& (lseg (x12, x8))) &*& (lseg (x2, x12))) &*& (lseg (x2, x11))) &*& (lseg (x9, x14))) &*& (lseg (x9, x1))) &*& (lseg (x3, x9))) &*& (lseg (x11, x13))) &*& (lseg (x11, x3))))
	ensures false
{}
