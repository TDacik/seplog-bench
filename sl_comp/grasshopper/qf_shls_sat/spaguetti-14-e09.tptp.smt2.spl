//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node)
	requires (((((((((((((((null == null) &*& (x8 != x13)) &*& (x8 != x10)) &*& (x8 != x9)) &*& (x6 != x11)) &*& (x11 != x13)) &*& (x7 != x8)) &*& (x7 != x12)) &*& (x9 != x13)) &*& (x9 != x10)) &*& (x12 != x13)) &*& (x12 != x14)) &*& (x5 != x8)) &*& (x5 != x12)) &*& ((((((((((((((lseg (x5, x11)) &*& (lseg (x13, x14))) &*& (lseg (x1, x2))) &*& (lseg (x1, x9))) &*& (lseg (x1, x7))) &*& (lseg (x4, x14))) &*& (lseg (x14, x4))) &*& (lseg (x9, x13))) &*& (lseg (x7, x4))) &*& (lseg (x3, x4))) &*& (lseg (x11, x14))) &*& (lseg (x11, x10))) &*& (lseg (x6, x3))) &*& (lseg (x6, x11))))
	ensures false
{}
