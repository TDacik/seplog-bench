//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node)
	requires ((((((((((((((((((((null == null) &*& (x6 != x19)) &*& (x3 != x7)) &*& (x3 != x20)) &*& (x7 != x20)) &*& (x9 != x19)) &*& (x2 != x20)) &*& (x8 != x19)) &*& (x8 != x17)) &*& (x4 != x11)) &*& (x4 != x13)) &*& (x4 != x19)) &*& (x1 != x16)) &*& (x1 != x20)) &*& (x13 != x18)) &*& (x13 != x17)) &*& (x10 != x19)) &*& (x10 != x20)) &*& (x16 != x19)) &*& ((((((((((((((lseg (x5, x17)) &*& (lseg (x19, x1))) &*& (lseg (x4, x12))) &*& (lseg (x12, x20))) &*& (lseg (x12, x15))) &*& (lseg (x12, x11))) &*& (lseg (x2, x18))) &*& (lseg (x17, x14))) &*& (lseg (x7, x16))) &*& (lseg (x3, x20))) &*& (lseg (x3, x12))) &*& (lseg (x11, x12))) &*& (lseg (x6, x17))) &*& (lseg (x6, x19))))
	ensures false
{}
