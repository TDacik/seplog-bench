//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node)
	requires (((((((((((((((null == null) &*& (x6 != x9)) &*& (x6 != x13)) &*& (x3 != x9)) &*& (x3 != x13)) &*& (x2 != x18)) &*& (x15 != x19)) &*& (x15 != x20)) &*& (x14 != x15)) &*& (x4 != x14)) &*& (x1 != x20)) &*& (x13 != x19)) &*& (x13 != x17)) &*& (x5 != x20)) &*& (((((((((((((lseg (x5, x20)) &*& (lseg (x13, x20))) &*& (lseg (x19, x1))) &*& (lseg (x4, x1))) &*& (lseg (x4, x8))) &*& (lseg (x20, x15))) &*& (lseg (x20, x18))) &*& (lseg (x15, x11))) &*& (lseg (x2, x13))) &*& (lseg (x12, x8))) &*& (lseg (x7, x2))) &*& (lseg (x3, x12))) &*& (lseg (x6, x7))))
	ensures false
{}
