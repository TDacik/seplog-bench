//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node)
	requires ((((((((null == null) &*& (x1 != x2)) &*& (x4 != x9)) &*& (x11 != x12)) &*& (x3 != x10)) &*& (x7 != x9)) &*& (x5 != x6)) &*& ((((((((((((lseg (x10, x5)) &*& (lseg (x13, x5))) &*& (lseg (x13, x12))) &*& (lseg (x4, x10))) &*& (lseg (x4, x1))) &*& (lseg (x4, x6))) &*& (lseg (x1, x10))) &*& (lseg (x12, x6))) &*& (lseg (x3, x5))) &*& (lseg (x3, x11))) &*& (lseg (x11, x8))) &*& (lseg (x6, x8))))
	ensures false
{}
