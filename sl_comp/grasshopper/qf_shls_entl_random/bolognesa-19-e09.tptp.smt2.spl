//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node)
	requires ((null == null) &*& (((((((((((((((((((lseg (x14, x18)) &*& (x3.next |-> x7)) &*& (x9.next |-> x4)) &*& (lseg (x6, x1))) &*& (lseg (x19, x3))) &*& (x5.next |-> x11)) &*& (x4.next |-> x13)) &*& (x18.next |-> x19)) &*& (lseg (x17, x3))) &*& (x1.next |-> x18)) &*& (lseg (x7, x10))) &*& (x11.next |-> x2)) &*& (x15.next |-> x3)) &*& (x16.next |-> x4)) &*& (lseg (x12, x6))) &*& (lseg (x10, x3))) &*& (x13.next |-> x19)) &*& (lseg (x2, x3))) &*& (lseg (x8, x14))))
	ensures ((((((((((((lseg (x15, x3)) &*& (lseg (x17, x3))) &*& (lseg (x12, x18))) &*& (lseg (x9, x4))) &*& (lseg (x16, x4))) &*& (lseg (x4, x13))) &*& (lseg (x5, x2))) &*& (lseg (x8, x18))) &*& (lseg (x13, x19))) &*& (lseg (x10, x3))) &*& (lseg (x18, x3))) &*& (lseg (x2, x10)))
{}
