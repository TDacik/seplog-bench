//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires ((null == null) &*& ((((((((((((x7.next |-> x10) &*& (x4.next |-> x11)) &*& (x6.next |-> x5)) &*& (lseg (x9, x5))) &*& (x10.next |-> x12)) &*& (lseg (x3, x8))) &*& (x1.next |-> x2)) &*& (x11.next |-> x1)) &*& (x5.next |-> x4)) &*& (x12.next |-> x9)) &*& (lseg (x2, x8))) &*& (lseg (x8, x11))))
	ensures ((((((lseg (x7, x12)) &*& (lseg (x12, x5))) &*& (lseg (x3, x8))) &*& (lseg (x8, x11))) &*& (lseg (x6, x11))) &*& (lseg (x11, x8)))
{}
