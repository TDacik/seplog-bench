//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node, x21 : Node, x22 : Node, x23 : Node, x24 : Node, x25 : Node, x26 : Node, x27 : Node, x28 : Node)
	requires (((((((((((((((((((((((((((((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x3)) &*& (x1 != x2)) &*& (x2 != x3)) &*& (null != x5)) &*& (null != x6)) &*& (null != x7)) &*& (x5 != x6)) &*& (x6 != x7)) &*& (null != x9)) &*& (null != x10)) &*& (null != x11)) &*& (x9 != x10)) &*& (x10 != x11)) &*& (null != x13)) &*& (null != x14)) &*& (null != x15)) &*& (x13 != x14)) &*& (x14 != x15)) &*& (null != x17)) &*& (null != x18)) &*& (null != x19)) &*& (x17 != x18)) &*& (x18 != x19)) &*& (null != x21)) &*& (null != x22)) &*& (null != x23)) &*& (x21 != x22)) &*& (x22 != x23)) &*& (null != x25)) &*& (null != x26)) &*& (null != x27)) &*& (x25 != x26)) &*& (x26 != x27)) &*& ((((((((((((((lseg (x27, x25)) &*& (x25.next |-> x27)) &*& (lseg (x23, x21))) &*& (x21.next |-> x23)) &*& (lseg (x19, x17))) &*& (x17.next |-> x19)) &*& (lseg (x15, x13))) &*& (x13.next |-> x15)) &*& (lseg (x11, x9))) &*& (x9.next |-> x11)) &*& (lseg (x7, x5))) &*& (x5.next |-> x7)) &*& (lseg (x3, x1))) &*& (x1.next |-> x3)))
	ensures ((((((((((((((lseg (x28, x25)) &*& (x25.next |-> x28)) &*& (lseg (x24, x21))) &*& (x21.next |-> x24)) &*& (lseg (x20, x17))) &*& (x17.next |-> x20)) &*& (lseg (x16, x13))) &*& (x13.next |-> x16)) &*& (lseg (x12, x9))) &*& (x9.next |-> x12)) &*& (lseg (x8, x5))) &*& (x5.next |-> x8)) &*& (lseg (x4, x1))) &*& (x1.next |-> x4))
{}
