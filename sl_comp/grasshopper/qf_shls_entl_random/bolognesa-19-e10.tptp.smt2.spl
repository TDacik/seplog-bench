//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node)
	requires ((null == null) &*& (((((((((((((((((((x6.next |-> x18) &*& (x11.next |-> x5)) &*& (x17.next |-> x18)) &*& (lseg (x2, x10))) &*& (lseg (x14, x10))) &*& (x19.next |-> x17)) &*& (x1.next |-> x13)) &*& (x10.next |-> x16)) &*& (x7.next |-> x8)) &*& (x16.next |-> x1)) &*& (x13.next |-> x14)) &*& (x12.next |-> x6)) &*& (x4.next |-> x9)) &*& (x15.next |-> x10)) &*& (x8.next |-> x9)) &*& (x9.next |-> x17)) &*& (x5.next |-> x13)) &*& (x3.next |-> x9)) &*& (x18.next |-> x17)))
	ensures (((((((((((((lseg (x12, x6)) &*& (lseg (x2, x10))) &*& (lseg (x11, x5))) &*& (lseg (x1, x13))) &*& (lseg (x15, x10))) &*& (lseg (x4, x9))) &*& (lseg (x19, x17))) &*& (lseg (x7, x8))) &*& (lseg (x8, x9))) &*& (lseg (x6, x18))) &*& (lseg (x3, x18))) &*& (lseg (x18, x17))) &*& (lseg (x5, x1)))
{}
