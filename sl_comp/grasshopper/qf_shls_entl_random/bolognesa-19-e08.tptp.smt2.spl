//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node)
	requires ((null == null) &*& (((((((((((((((((((x14.next |-> x17) &*& (x6.next |-> x11)) &*& (x8.next |-> x18)) &*& (lseg (x2, x15))) &*& (lseg (x4, x3))) &*& (x12.next |-> x5)) &*& (x10.next |-> x16)) &*& (lseg (x1, x17))) &*& (lseg (x5, x6))) &*& (lseg (x19, x13))) &*& (lseg (x16, x15))) &*& (lseg (x3, x17))) &*& (lseg (x7, x14))) &*& (x15.next |-> x12)) &*& (lseg (x13, x3))) &*& (lseg (x9, x10))) &*& (x11.next |-> x4)) &*& (x17.next |-> x8)) &*& (x18.next |-> x6)))
	ensures (((((((((lseg (x1, x17)) &*& (lseg (x19, x3))) &*& (lseg (x18, x6))) &*& (lseg (x9, x10))) &*& (lseg (x10, x16))) &*& (lseg (x2, x15))) &*& (lseg (x16, x12))) &*& (lseg (x7, x17))) &*& (lseg (x12, x18)))
{}
