//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node)
	requires ((null == null) &*& (((((((((((((((x14.next |-> x1) &*& (lseg (x3, x15))) &*& (x7.next |-> x2)) &*& (x12.next |-> x1)) &*& (x13.next |-> x14)) &*& (lseg (x1, x5))) &*& (lseg (x9, x4))) &*& (lseg (x4, x7))) &*& (x15.next |-> x8)) &*& (x5.next |-> x4)) &*& (x11.next |-> x2)) &*& (lseg (x2, x8))) &*& (x6.next |-> x15)) &*& (x10.next |-> x3)) &*& (x8.next |-> x11)))
	ensures (((((((lseg (x6, x15)) &*& (lseg (x10, x3))) &*& (lseg (x9, x4))) &*& (lseg (x12, x1))) &*& (lseg (x3, x8))) &*& (lseg (x11, x2))) &*& (lseg (x13, x11)))
{}
