//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node)
	requires ((null == null) &*& (((((((((((((((((((x19.next |-> x13) &*& (lseg (x1, x18))) &*& (x11.next |-> x18)) &*& (x18.next |-> x16)) &*& (lseg (x16, x19))) &*& (x2.next |-> x19)) &*& (lseg (x4, x12))) &*& (x6.next |-> x7)) &*& (lseg (x10, x2))) &*& (x5.next |-> x8)) &*& (x14.next |-> x6)) &*& (x3.next |-> x10)) &*& (x7.next |-> x18)) &*& (x12.next |-> x15)) &*& (x9.next |-> x16)) &*& (x17.next |-> x5)) &*& (x13.next |-> x9)) &*& (x15.next |-> x17)) &*& (x8.next |-> x7)))
	ensures (((((((((lseg (x4, x12)) &*& (lseg (x14, x6))) &*& (lseg (x12, x15))) &*& (lseg (x11, x18))) &*& (lseg (x15, x7))) &*& (lseg (x6, x18))) &*& (lseg (x1, x16))) &*& (lseg (x16, x19))) &*& (lseg (x3, x16)))
{}
