//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node)
	requires ((null == null) &*& (((((((((((x1.next |-> x11) &*& (x3.next |-> x1)) &*& (x6.next |-> x2)) &*& (x9.next |-> x6)) &*& (x4.next |-> x1)) &*& (x8.next |-> x3)) &*& (x5.next |-> x11)) &*& (lseg (x7, x9))) &*& (x11.next |-> x3)) &*& (x2.next |-> x11)) &*& (lseg (x10, x11))))
	ensures ((((((((lseg (x8, x3)) &*& (lseg (x7, x9))) &*& (lseg (x3, x1))) &*& (lseg (x4, x1))) &*& (lseg (x9, x11))) &*& (lseg (x10, x11))) &*& (lseg (x5, x11))) &*& (lseg (x1, x3)))
{}
