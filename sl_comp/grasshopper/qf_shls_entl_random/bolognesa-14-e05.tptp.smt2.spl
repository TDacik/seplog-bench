//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node)
	requires ((null == null) &*& ((((((((((((((x11.next |-> x6) &*& (lseg (x4, x10))) &*& (x13.next |-> x9)) &*& (lseg (x14, x12))) &*& (x5.next |-> x9)) &*& (lseg (x10, x11))) &*& (x7.next |-> x12)) &*& (lseg (x2, x12))) &*& (lseg (x3, x12))) &*& (x9.next |-> x4)) &*& (x1.next |-> x6)) &*& (x12.next |-> x7)) &*& (lseg (x6, x4))) &*& (x8.next |-> x4)))
	ensures (((((((((lseg (x7, x12)) &*& (lseg (x3, x12))) &*& (lseg (x5, x9))) &*& (lseg (x8, x4))) &*& (lseg (x13, x10))) &*& (lseg (x1, x6))) &*& (lseg (x2, x12))) &*& (lseg (x14, x7))) &*& (lseg (x10, x4)))
{}
