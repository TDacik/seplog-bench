//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node)
	requires ((null == null) &*& (((((((((((((((lseg (x11, x15)) &*& (x4.next |-> x5)) &*& (x5.next |-> x11)) &*& (lseg (x1, x12))) &*& (lseg (x12, x13))) &*& (lseg (x7, x6))) &*& (x3.next |-> x1)) &*& (lseg (x9, x11))) &*& (x2.next |-> x8)) &*& (x10.next |-> x5)) &*& (x15.next |-> x5)) &*& (x14.next |-> x6)) &*& (x13.next |-> x4)) &*& (x8.next |-> x11)) &*& (x6.next |-> x8)))
	ensures ((((((((((lseg (x15, x5)) &*& (lseg (x9, x11))) &*& (lseg (x10, x5))) &*& (lseg (x3, x1))) &*& (lseg (x7, x6))) &*& (lseg (x2, x8))) &*& (lseg (x1, x4))) &*& (lseg (x4, x5))) &*& (lseg (x14, x11))) &*& (lseg (x5, x15)))
{}
