//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node)
	requires ((null == null) &*& ((((((((((((((((((((x19.next |-> x10) &*& (x9.next |-> x1)) &*& (x6.next |-> x11)) &*& (x12.next |-> x2)) &*& (x5.next |-> x6)) &*& (x1.next |-> x12)) &*& (x13.next |-> x14)) &*& (x18.next |-> x12)) &*& (x14.next |-> x2)) &*& (lseg (x7, x5))) &*& (x15.next |-> x13)) &*& (x10.next |-> x7)) &*& (lseg (x3, x18))) &*& (lseg (x8, x14))) &*& (x16.next |-> x7)) &*& (x11.next |-> x5)) &*& (x4.next |-> x2)) &*& (x2.next |-> x15)) &*& (lseg (x17, x19))) &*& (x20.next |-> x11)))
	ensures ((((((((((lseg (x8, x14)) &*& (lseg (x14, x2))) &*& (lseg (x16, x7))) &*& (lseg (x4, x2))) &*& (lseg (x20, x11))) &*& (lseg (x17, x5))) &*& (lseg (x5, x6))) &*& (lseg (x6, x5))) &*& (lseg (x3, x12))) &*& (lseg (x9, x14)))
{}
