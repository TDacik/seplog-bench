//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node)
	requires (((((((((((null == null) &*& (null != x1)) &*& (null != x3)) &*& (null != x5)) &*& (null != x7)) &*& (null != x9)) &*& (null != x11)) &*& (null != x13)) &*& (null != x15)) &*& (null != x17)) &*& (((((((((x17.next |-> x18) &*& (x15.next |-> x16)) &*& (x13.next |-> x14)) &*& (x11.next |-> x12)) &*& (x9.next |-> x10)) &*& (x7.next |-> x8)) &*& (x5.next |-> x6)) &*& (x3.next |-> x4)) &*& (x1.next |-> x2)))
	ensures (((((((((x17.next |-> x18) &*& (x15.next |-> x16)) &*& (x13.next |-> x14)) &*& (x11.next |-> x12)) &*& (x9.next |-> x10)) &*& (x7.next |-> x8)) &*& (x5.next |-> x6)) &*& (x3.next |-> x4)) &*& (x1.next |-> x2))
{}
