//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node)
	requires ((null == null) &*& ((((((((((((((((((x16.next |-> x9) &*& (lseg (x2, x1))) &*& (x17.next |-> x8)) &*& (x1.next |-> x4)) &*& (x5.next |-> x13)) &*& (lseg (x10, x17))) &*& (x12.next |-> x15)) &*& (x3.next |-> x12)) &*& (lseg (x8, x13))) &*& (lseg (x4, x1))) &*& (x15.next |-> x12)) &*& (x7.next |-> x16)) &*& (x11.next |-> x10)) &*& (lseg (x14, x5))) &*& (x6.next |-> x2)) &*& (x9.next |-> x1)) &*& (lseg (x18, x7))) &*& (x13.next |-> x9)))
	ensures ((((((((((lseg (x11, x10)) &*& (lseg (x15, x12))) &*& (lseg (x10, x13))) &*& (lseg (x3, x12))) &*& (lseg (x18, x9))) &*& (lseg (x12, x15))) &*& (lseg (x14, x5))) &*& (lseg (x6, x1))) &*& (lseg (x5, x4))) &*& (lseg (x4, x1)))
{}
