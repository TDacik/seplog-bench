//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node)
	requires ((null == null) &*& ((((((((((((((((((((x6.next |-> x12) &*& (lseg (x15, x7))) &*& (lseg (x10, x1))) &*& (x14.next |-> x7)) &*& (x2.next |-> x1)) &*& (lseg (x12, x7))) &*& (x9.next |-> x19)) &*& (x13.next |-> x11)) &*& (x8.next |-> x17)) &*& (x16.next |-> x1)) &*& (x1.next |-> x18)) &*& (x4.next |-> x19)) &*& (x17.next |-> x11)) &*& (x3.next |-> x12)) &*& (x18.next |-> x4)) &*& (lseg (x20, x12))) &*& (x5.next |-> x17)) &*& (x11.next |-> x6)) &*& (x19.next |-> x1)) &*& (lseg (x7, x12))))
	ensures ((((((((((((((lseg (x15, x7)) &*& (lseg (x3, x12))) &*& (lseg (x8, x17))) &*& (lseg (x14, x7))) &*& (lseg (x5, x17))) &*& (lseg (x7, x12))) &*& (lseg (x10, x1))) &*& (lseg (x16, x1))) &*& (lseg (x20, x12))) &*& (lseg (x13, x11))) &*& (lseg (x17, x11))) &*& (lseg (x9, x1))) &*& (lseg (x11, x7))) &*& (lseg (x2, x19)))
{}
