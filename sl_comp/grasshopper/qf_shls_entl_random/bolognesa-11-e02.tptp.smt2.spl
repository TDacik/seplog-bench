//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node)
	requires ((null == null) &*& (((((((((((x7.next |-> x1) &*& (x11.next |-> x7)) &*& (x9.next |-> x8)) &*& (lseg (x4, x9))) &*& (x8.next |-> x5)) &*& (x1.next |-> x4)) &*& (lseg (x10, x2))) &*& (x5.next |-> x6)) &*& (lseg (x3, x2))) &*& (x6.next |-> x5)) &*& (x2.next |-> x6)))
	ensures ((((((lseg (x11, x7)) &*& (lseg (x7, x9))) &*& (lseg (x9, x5))) &*& (lseg (x3, x2))) &*& (lseg (x5, x6))) &*& (lseg (x10, x5)))
{}
