//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires (((((((((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x3)) &*& (x1 != x3)) &*& (x2 != x3)) &*& (null != x5)) &*& (null != x6)) &*& (null != x7)) &*& (x5 != x7)) &*& (x6 != x7)) &*& (null != x9)) &*& (null != x10)) &*& (null != x11)) &*& (x9 != x11)) &*& (x10 != x11)) &*& (((((((((lseg (x10, x9)) &*& (x11.next |-> x10)) &*& (x9.next |-> x11)) &*& (lseg (x6, x5))) &*& (x7.next |-> x6)) &*& (x5.next |-> x7)) &*& (lseg (x2, x1))) &*& (x3.next |-> x2)) &*& (x1.next |-> x3)))
	ensures (((((((((x12.next |-> x11) &*& (lseg (x10, x12))) &*& (x11.next |-> x10)) &*& (x8.next |-> x7)) &*& (lseg (x6, x8))) &*& (x7.next |-> x6)) &*& (x4.next |-> x3)) &*& (lseg (x2, x4))) &*& (x3.next |-> x2))
{}
