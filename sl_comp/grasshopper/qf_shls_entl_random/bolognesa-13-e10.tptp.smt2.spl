//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node)
	requires ((null == null) &*& (((((((((((((lseg (x3, x6)) &*& (lseg (x7, x4))) &*& (x1.next |-> x10)) &*& (x8.next |-> x13)) &*& (lseg (x12, x2))) &*& (x6.next |-> x9)) &*& (lseg (x13, x11))) &*& (x9.next |-> x8)) &*& (lseg (x5, x7))) &*& (lseg (x2, x10))) &*& (lseg (x10, x1))) &*& (lseg (x11, x4))) &*& (lseg (x4, x1))))
	ensures (((((((lseg (x3, x8)) &*& (lseg (x8, x13))) &*& (lseg (x5, x7))) &*& (lseg (x13, x4))) &*& (lseg (x12, x10))) &*& (lseg (x7, x10))) &*& (lseg (x10, x1)))
{}
