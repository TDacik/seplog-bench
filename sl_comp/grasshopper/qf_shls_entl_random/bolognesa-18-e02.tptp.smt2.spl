//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node)
	requires ((null == null) &*& ((((((((((((((((((lseg (x8, x6)) &*& (x6.next |-> x11)) &*& (lseg (x15, x1))) &*& (x5.next |-> x6)) &*& (x2.next |-> x7)) &*& (lseg (x11, x4))) &*& (lseg (x9, x5))) &*& (x13.next |-> x14)) &*& (lseg (x16, x18))) &*& (x7.next |-> x14)) &*& (x3.next |-> x18)) &*& (x4.next |-> x13)) &*& (lseg (x18, x15))) &*& (x12.next |-> x16)) &*& (x10.next |-> x4)) &*& (x14.next |-> x10)) &*& (x17.next |-> x4)) &*& (x1.next |-> x16)))
	ensures (((((((((lseg (x8, x6)) &*& (lseg (x10, x4))) &*& (lseg (x9, x4))) &*& (lseg (x15, x1))) &*& (lseg (x3, x18))) &*& (lseg (x2, x14))) &*& (lseg (x12, x16))) &*& (lseg (x17, x10))) &*& (lseg (x1, x15)))
{}
