//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node)
	requires ((null == null) &*& (((((((((((((((((x14.next |-> x12) &*& (lseg (x2, x15))) &*& (lseg (x17, x13))) &*& (x11.next |-> x4)) &*& (x5.next |-> x17)) &*& (x3.next |-> x11)) &*& (x8.next |-> x6)) &*& (lseg (x6, x5))) &*& (lseg (x10, x4))) &*& (lseg (x16, x2))) &*& (lseg (x7, x14))) &*& (x1.next |-> x17)) &*& (x12.next |-> x15)) &*& (x4.next |-> x14)) &*& (x13.next |-> x8)) &*& (x9.next |-> x5)) &*& (x15.next |-> x13)))
	ensures (((((((lseg (x1, x17)) &*& (lseg (x9, x5))) &*& (lseg (x7, x14))) &*& (lseg (x17, x13))) &*& (lseg (x16, x15))) &*& (lseg (x3, x4))) &*& (lseg (x10, x17)))
{}
