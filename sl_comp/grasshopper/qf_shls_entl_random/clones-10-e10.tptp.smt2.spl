//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node, x21 : Node, x22 : Node, x23 : Node, x24 : Node, x25 : Node, x26 : Node, x27 : Node, x28 : Node, x29 : Node, x30 : Node)
	requires ((((((((((((((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x4)) &*& (null != x5)) &*& (null != x7)) &*& (null != x8)) &*& (null != x10)) &*& (null != x11)) &*& (null != x13)) &*& (null != x14)) &*& (null != x16)) &*& (null != x17)) &*& (null != x19)) &*& (null != x20)) &*& (null != x22)) &*& (null != x23)) &*& (null != x25)) &*& (null != x26)) &*& (null != x28)) &*& (null != x29)) &*& ((((((((((((((((((((lseg (x28, x29)) &*& (x29.next |-> x28)) &*& (lseg (x25, x26))) &*& (x26.next |-> x25)) &*& (lseg (x22, x23))) &*& (x23.next |-> x22)) &*& (lseg (x19, x20))) &*& (x20.next |-> x19)) &*& (lseg (x16, x17))) &*& (x17.next |-> x16)) &*& (lseg (x13, x14))) &*& (x14.next |-> x13)) &*& (lseg (x10, x11))) &*& (x11.next |-> x10)) &*& (lseg (x7, x8))) &*& (x8.next |-> x7)) &*& (lseg (x4, x5))) &*& (x5.next |-> x4)) &*& (lseg (x1, x2))) &*& (x2.next |-> x1)))
	ensures ((((((((((((((((((((lseg (x30, x29)) &*& (x29.next |-> x30)) &*& (lseg (x27, x26))) &*& (x26.next |-> x27)) &*& (lseg (x24, x23))) &*& (x23.next |-> x24)) &*& (lseg (x21, x20))) &*& (x20.next |-> x21)) &*& (lseg (x18, x17))) &*& (x17.next |-> x18)) &*& (lseg (x15, x14))) &*& (x14.next |-> x15)) &*& (lseg (x12, x11))) &*& (x11.next |-> x12)) &*& (lseg (x9, x8))) &*& (x8.next |-> x9)) &*& (lseg (x6, x5))) &*& (x5.next |-> x6)) &*& (lseg (x3, x2))) &*& (x2.next |-> x3))
{}
