//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node)
	requires ((null == null) &*& ((((((((((((((((x6.next |-> x15) &*& (x5.next |-> x14)) &*& (x9.next |-> x3)) &*& (lseg (x12, x11))) &*& (x10.next |-> x13)) &*& (x13.next |-> x1)) &*& (x3.next |-> x2)) &*& (lseg (x16, x7))) &*& (lseg (x14, x11))) &*& (lseg (x1, x11))) &*& (x11.next |-> x15)) &*& (x8.next |-> x1)) &*& (x15.next |-> x5)) &*& (lseg (x4, x14))) &*& (x7.next |-> x4)) &*& (x2.next |-> x15)))
	ensures (((((((((((lseg (x6, x15)) &*& (lseg (x10, x13))) &*& (lseg (x9, x3))) &*& (lseg (x16, x7))) &*& (lseg (x3, x2))) &*& (lseg (x2, x15))) &*& (lseg (x8, x1))) &*& (lseg (x7, x4))) &*& (lseg (x12, x11))) &*& (lseg (x4, x11))) &*& (lseg (x13, x14)))
{}
