//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires ((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x4)) &*& (null != x5)) &*& (null != x7)) &*& (null != x8)) &*& (null != x10)) &*& (null != x11)) &*& ((((((((lseg (x10, x11)) &*& (x11.next |-> x10)) &*& (lseg (x7, x8))) &*& (x8.next |-> x7)) &*& (lseg (x4, x5))) &*& (x5.next |-> x4)) &*& (lseg (x1, x2))) &*& (x2.next |-> x1)))
	ensures ((((((((lseg (x12, x11)) &*& (x11.next |-> x12)) &*& (lseg (x9, x8))) &*& (x8.next |-> x9)) &*& (lseg (x6, x5))) &*& (x5.next |-> x6)) &*& (lseg (x3, x2))) &*& (x2.next |-> x3))
{}
