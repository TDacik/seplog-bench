//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node)
	requires ((null == null) &*& ((((((((((((x4.next |-> x12) &*& (lseg (x9, x10))) &*& (x3.next |-> x11)) &*& (x7.next |-> x9)) &*& (x5.next |-> x2)) &*& (lseg (x12, x4))) &*& (x10.next |-> x9)) &*& (x1.next |-> x2)) &*& (x11.next |-> x7)) &*& (lseg (x2, x11))) &*& (x6.next |-> x10)) &*& (x8.next |-> x4)))
	ensures ((((((((lseg (x6, x10)) &*& (lseg (x12, x4))) &*& (lseg (x8, x12))) &*& (lseg (x5, x2))) &*& (lseg (x1, x11))) &*& (lseg (x3, x7))) &*& (lseg (x10, x9))) &*& (lseg (x7, x10)))
{}
