//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node)
	requires ((((((((((((null == null) &*& (null != x1)) &*& (null != x2)) &*& (null != x3)) &*& (x1 != x2)) &*& (x2 != x3)) &*& (null != x5)) &*& (null != x6)) &*& (null != x7)) &*& (x5 != x6)) &*& (x6 != x7)) &*& ((((lseg (x7, x5)) &*& (x5.next |-> x7)) &*& (lseg (x3, x1))) &*& (x1.next |-> x3)))
	ensures ((((lseg (x8, x5)) &*& (x5.next |-> x8)) &*& (lseg (x4, x1))) &*& (x1.next |-> x4))
{}
