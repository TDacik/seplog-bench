//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node)
	requires ((null == null) &*& ((((((((((((((x11.next |-> x8) &*& (x5.next |-> x13)) &*& (x10.next |-> x5)) &*& (x9.next |-> x7)) &*& (x7.next |-> x3)) &*& (x3.next |-> x10)) &*& (x12.next |-> x3)) &*& (x13.next |-> x9)) &*& (x6.next |-> x4)) &*& (lseg (x2, x5))) &*& (x14.next |-> x12)) &*& (x1.next |-> x3)) &*& (x8.next |-> x13)) &*& (lseg (x4, x12))))
	ensures (((((((lseg (x1, x3)) &*& (lseg (x2, x5))) &*& (lseg (x14, x12))) &*& (lseg (x5, x13))) &*& (lseg (x6, x3))) &*& (lseg (x11, x8))) &*& (lseg (x8, x5)))
{}
