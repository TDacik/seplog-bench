//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node)
	requires ((null == null) &*& (((((((((((x8.next |-> x7) &*& (lseg (x7, x2))) &*& (x11.next |-> x9)) &*& (x4.next |-> x1)) &*& (x1.next |-> x8)) &*& (lseg (x6, x9))) &*& (x3.next |-> x11)) &*& (x5.next |-> x7)) &*& (lseg (x9, x1))) &*& (x10.next |-> x7)) &*& (lseg (x2, x7))))
	ensures ((((((lseg (x10, x7)) &*& (lseg (x6, x9))) &*& (lseg (x2, x7))) &*& (lseg (x4, x1))) &*& (lseg (x3, x7))) &*& (lseg (x5, x2)))
{}
