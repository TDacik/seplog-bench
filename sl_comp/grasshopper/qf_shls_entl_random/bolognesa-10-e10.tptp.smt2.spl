//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node)
	requires ((null == null) &*& ((((((((((x1.next |-> x2) &*& (x4.next |-> x6)) &*& (x9.next |-> x3)) &*& (lseg (x7, x2))) &*& (lseg (x5, x4))) &*& (x3.next |-> x2)) &*& (x8.next |-> x9)) &*& (x6.next |-> x9)) &*& (x2.next |-> x10)) &*& (lseg (x10, x1))))
	ensures ((((((((lseg (x5, x4)) &*& (lseg (x7, x2))) &*& (lseg (x1, x2))) &*& (lseg (x4, x6))) &*& (lseg (x8, x9))) &*& (lseg (x6, x3))) &*& (lseg (x3, x2))) &*& (lseg (x2, x1)))
{}
