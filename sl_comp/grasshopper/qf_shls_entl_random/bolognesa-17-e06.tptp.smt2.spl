//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node)
	requires ((null == null) &*& (((((((((((((((((x17.next |-> x15) &*& (lseg (x6, x15))) &*& (x10.next |-> x15)) &*& (lseg (x5, x2))) &*& (x8.next |-> x10)) &*& (x1.next |-> x4)) &*& (x2.next |-> x1)) &*& (x16.next |-> x15)) &*& (x9.next |-> x1)) &*& (lseg (x15, x3))) &*& (lseg (x3, x5))) &*& (x7.next |-> x14)) &*& (x11.next |-> x2)) &*& (x12.next |-> x3)) &*& (x14.next |-> x2)) &*& (x13.next |-> x14)) &*& (x4.next |-> x7)))
	ensures ((((((((((lseg (x13, x14)) &*& (lseg (x11, x2))) &*& (lseg (x17, x15))) &*& (lseg (x16, x15))) &*& (lseg (x8, x10))) &*& (lseg (x9, x4))) &*& (lseg (x10, x15))) &*& (lseg (x6, x3))) &*& (lseg (x12, x2))) &*& (lseg (x4, x1)))
{}
