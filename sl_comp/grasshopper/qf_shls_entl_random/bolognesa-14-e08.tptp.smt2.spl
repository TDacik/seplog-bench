//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node)
	requires ((null == null) &*& ((((((((((((((lseg (x8, x9)) &*& (x6.next |-> x13)) &*& (lseg (x1, x4))) &*& (x11.next |-> x1)) &*& (x5.next |-> x6)) &*& (x2.next |-> x1)) &*& (x3.next |-> x13)) &*& (lseg (x9, x3))) &*& (x12.next |-> x13)) &*& (x10.next |-> x9)) &*& (x14.next |-> x13)) &*& (lseg (x4, x12))) &*& (lseg (x7, x13))) &*& (lseg (x13, x5))))
	ensures ((((((((lseg (x11, x1)) &*& (lseg (x2, x1))) &*& (lseg (x14, x13))) &*& (lseg (x8, x9))) &*& (lseg (x6, x13))) &*& (lseg (x7, x13))) &*& (lseg (x1, x13))) &*& (lseg (x10, x6)))
{}
