//status: sat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node)
	requires ((null == null) &*& ((((((((((x4.next |-> x5) &*& (x3.next |-> x9)) &*& (lseg (x8, x1))) &*& (lseg (x2, x8))) &*& (lseg (x1, x2))) &*& (x7.next |-> x8)) &*& (x9.next |-> x4)) &*& (x5.next |-> x1)) &*& (x10.next |-> x5)) &*& (x6.next |-> x10)))
	ensures ((((((lseg (x3, x9)) &*& (lseg (x9, x4))) &*& (lseg (x6, x10))) &*& (lseg (x10, x5))) &*& (lseg (x7, x1))) &*& (lseg (x4, x8)))
{}
