//status: unsat

// Generated by Astral

struct Node {
  var next: Node;
}

predicate lseg(x: Node, y: Node) {
  acc({ z: Node :: Btwn(next, x, z, y) && z != y }) &*& Reach(next, x, y)
}


procedure formula(x1 : Node, x2 : Node, x3 : Node, x4 : Node, x5 : Node, x6 : Node, x7 : Node, x8 : Node, x9 : Node, x10 : Node, x11 : Node, x12 : Node, x13 : Node, x14 : Node, x15 : Node, x16 : Node, x17 : Node, x18 : Node, x19 : Node, x20 : Node)
	requires ((null == null) &*& ((((((((((((((((((((x16.next |-> x19) &*& (x17.next |-> x13)) &*& (x12.next |-> x8)) &*& (x20.next |-> x1)) &*& (lseg (x2, x8))) &*& (lseg (x4, x8))) &*& (x18.next |-> x12)) &*& (lseg (x5, x15))) &*& (lseg (x14, x20))) &*& (lseg (x15, x6))) &*& (lseg (x13, x7))) &*& (x19.next |-> x1)) &*& (x1.next |-> x12)) &*& (x8.next |-> x7)) &*& (x9.next |-> x11)) &*& (x7.next |-> x10)) &*& (x3.next |-> x7)) &*& (x6.next |-> x3)) &*& (lseg (x11, x17))) &*& (x10.next |-> x17)))
	ensures (((((((((((((lseg (x10, x17)) &*& (lseg (x14, x20))) &*& (lseg (x16, x19))) &*& (lseg (x5, x6))) &*& (lseg (x2, x8))) &*& (lseg (x18, x12))) &*& (lseg (x20, x1))) &*& (lseg (x6, x3))) &*& (lseg (x3, x7))) &*& (lseg (x9, x11))) &*& (lseg (x19, x8))) &*& (lseg (x4, x7))) &*& (lseg (x11, x10)))
{}
