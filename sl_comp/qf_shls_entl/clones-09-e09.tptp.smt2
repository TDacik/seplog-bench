;; Preprocessed for Astral solver
(set-info :status sat)
;; variables
(declare-const x0 Loc)
(declare-const x1 Loc)
(declare-const x2 Loc)
(declare-const x3 Loc)
(declare-const x4 Loc)
(declare-const x5 Loc)
(declare-const x6 Loc)
(declare-const x7 Loc)
(declare-const x8 Loc)
(declare-const x9 Loc)
(declare-const x10 Loc)
(declare-const x11 Loc)
(declare-const x12 Loc)
(declare-const x13 Loc)
(declare-const x14 Loc)
(declare-const x15 Loc)
(declare-const x16 Loc)
(declare-const x17 Loc)
(declare-const x18 Loc)
(declare-const x19 Loc)
(declare-const x20 Loc)
(declare-const x21 Loc)
(declare-const x22 Loc)
(declare-const x23 Loc)
(declare-const x24 Loc)
(declare-const x25 Loc)
(declare-const x26 Loc)
(declare-const x27 Loc)
(declare-const x28 Loc)
(declare-const x29 Loc)
(declare-const x30 Loc)
(declare-const x31 Loc)
(declare-const x32 Loc)
(declare-const x33 Loc)
(declare-const x34 Loc)
(declare-const x35 Loc)
(declare-const x36 Loc)
(declare-const x37 Loc)
(declare-const x38 Loc)
(declare-const x39 Loc)
(declare-const x40 Loc)

(assert 
		(sep 
			(= nil nil)
			(distinct nil x1)
			(distinct nil x2)
			(distinct nil x3)
			(distinct x1 x2)
			(distinct x2 x3)
			(distinct nil x5)
			(distinct nil x6)
			(distinct nil x7)
			(distinct x5 x6)
			(distinct x6 x7)
			(distinct nil x9)
			(distinct nil x10)
			(distinct nil x11)
			(distinct x9 x10)
			(distinct x10 x11)
			(distinct nil x13)
			(distinct nil x14)
			(distinct nil x15)
			(distinct x13 x14)
			(distinct x14 x15)
			(distinct nil x17)
			(distinct nil x18)
			(distinct nil x19)
			(distinct x17 x18)
			(distinct x18 x19)
			(distinct nil x21)
			(distinct nil x22)
			(distinct nil x23)
			(distinct x21 x22)
			(distinct x22 x23)
			(distinct nil x25)
			(distinct nil x26)
			(distinct nil x27)
			(distinct x25 x26)
			(distinct x26 x27)
			(distinct nil x29)
			(distinct nil x30)
			(distinct nil x31)
			(distinct x29 x30)
			(distinct x30 x31)
			(distinct nil x33)
			(distinct nil x34)
			(distinct nil x35)
			(distinct x33 x34)
			(distinct x34 x35)
		(sep 
			(ls x35 x33 )
			(pto x33 (c_Sll_t x35 ))
			(ls x31 x29 )
			(pto x29 (c_Sll_t x31 ))
			(ls x27 x25 )
			(pto x25 (c_Sll_t x27 ))
			(ls x23 x21 )
			(pto x21 (c_Sll_t x23 ))
			(ls x19 x17 )
			(pto x17 x19)
			(ls x15 x13 )
			(pto x13 x15)
			(ls x11 x9 )
			(pto x9 x11)
			(ls x7 x5 )
			(pto x5 x7)
			(ls x3 x1 )
			(pto x1 x3)
		)

		)

)

(assert (not 
		(sep 
			(ls x36 x33 )
			(pto x33 (c_Sll_t x36 ))
			(ls x32 x29 )
			(pto x29 (c_Sll_t x32 ))
			(ls x28 x25 )
			(pto x25 (c_Sll_t x28 ))
			(ls x24 x21 )
			(pto x21 (c_Sll_t x24 ))
			(ls x20 x17 )
			(pto x17 x20)
			(ls x16 x13 )
			(pto x13 x16)
			(ls x12 x9 )
			(pto x9 x12)
			(ls x8 x5 )
			(pto x5 x8)
			(ls x4 x1 )
			(pto x1 x4)
		)

))

(check-sat)
