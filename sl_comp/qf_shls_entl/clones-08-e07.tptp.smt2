;; Preprocessed for Astral solver
(set-info :status sat)
;; variables
(declare-const x0 Loc)
(declare-const x1 Loc)
(declare-const x2 Loc)
(declare-const x3 Loc)
(declare-const x4 Loc)
(declare-const x5 Loc)
(declare-const x6 Loc)
(declare-const x7 Loc)
(declare-const x8 Loc)
(declare-const x9 Loc)
(declare-const x10 Loc)
(declare-const x11 Loc)
(declare-const x12 Loc)
(declare-const x13 Loc)
(declare-const x14 Loc)
(declare-const x15 Loc)
(declare-const x16 Loc)
(declare-const x17 Loc)
(declare-const x18 Loc)
(declare-const x19 Loc)
(declare-const x20 Loc)
(declare-const x21 Loc)
(declare-const x22 Loc)
(declare-const x23 Loc)
(declare-const x24 Loc)
(declare-const x25 Loc)
(declare-const x26 Loc)
(declare-const x27 Loc)
(declare-const x28 Loc)

(assert 
		(sep 
			(= nil nil)
			(distinct nil x1)
			(distinct nil x2)
			(distinct nil x4)
			(distinct nil x5)
			(distinct nil x7)
			(distinct nil x8)
			(distinct nil x10)
			(distinct nil x11)
			(distinct nil x13)
			(distinct nil x14)
			(distinct nil x16)
			(distinct nil x17)
			(distinct nil x19)
			(distinct nil x20)
			(distinct nil x22)
			(distinct nil x23)
		(sep 
			(ls x22 x23 )
			(pto x23 (c_Sll_t x22 ))
			(ls x19 x20 )
			(pto x20 x19)
			(ls x16 x17 )
			(pto x17 x16)
			(ls x13 x14 )
			(pto x14 x13)
			(ls x10 x11 )
			(pto x11 x10)
			(ls x7 x8 )
			(pto x8 x7)
			(ls x4 x5 )
			(pto x5 x4)
			(ls x1 x2 )
			(pto x2 x1)
		)

		)

)

(assert (not 
		(sep 
			(ls x24 x23 )
			(pto x23 (c_Sll_t x24 ))
			(ls x21 x20 )
			(pto x20 (c_Sll_t x21 ))
			(ls x18 x17 )
			(pto x17 x18)
			(ls x15 x14 )
			(pto x14 x15)
			(ls x12 x11 )
			(pto x11 x12)
			(ls x9 x8 )
			(pto x8 x9)
			(ls x6 x5 )
			(pto x5 x6)
			(ls x3 x2 )
			(pto x2 x3)
		)

))

(check-sat)
